# generated by datamodel-codegen:
#   filename:  TomraConsumerSessionApi.yaml
#   timestamp: 2025-10-20T08:43:52+00:00

from __future__ import annotations

from enum import Enum
from uuid import UUID

from pydantic import AnyUrl, AwareDatetime, BaseModel, ConfigDict, Field


class Donation(BaseModel):
    """
    A donation to a receiver. The receiver is configured on the RVM.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    receiver: str | None = Field(
        None, description="The id of the donation receiver", examples=["redcross"]
    )
    amount: int | None = Field(
        None,
        description="Amount donated, multiplied by 1000 to remove decimals. E.g. a value of 4200 corresponds to a decimal value of 4.2.",
        examples=[1000],
    )


class Bulk(BaseModel):
    """
    This information is only relevant for bulk RVMs
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    batch_mode: str | None = Field(
        None,
        alias="batchMode",
        description="The batch mode of the rvm running the batch",
    )
    batch_codes: list[str] | None = Field(
        None, alias="batchCodes", description="Array of market specific flags on batch"
    )
    operator_identity: str | None = Field(
        None,
        alias="operatorIdentity",
        description="Identity of the operator of a bulk RVM during the consumer session",
    )


class Type(Enum):
    """
    type of item, single, crate or crateItem. CrateItems are single items inside a crate
    """

    single = "single"
    crate = "crate"
    crate_item = "crateItem"


class Type2(Enum):
    """
    type of item, currently only single is supported
    """

    single = "single"


class Single(BaseModel):
    """
    Properties for a single object.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    barcode: str | None = Field(
        None,
        description="Deprecated property - use productCode instead.",
        examples=["5449000000996"],
    )
    product_code: str | None = Field(
        None,
        alias="productCode",
        description="Product code scanned on the item. Absent if not available.",
        examples=["5449000000996"],
    )
    product_individual_code: str | None = Field(
        None,
        alias="productIndividualCode",
        description="Individual serializable code scanned on the item. Absent if not available.",
        examples=["Q8uJdozWx8oEH21G"],
    )


class Crate(BaseModel):
    """
    Properties for a crate.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )


class Identity(BaseModel):
    """
    Contains an identity linking the session to a consumer.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    consumer_identity: str | None = Field(
        None,
        alias="consumerIdentity",
        description="Identity provided in consumer identification operation, e.g. from QR scan, loyalty card registration etc.",
        examples=["user99"],
    )
    bag_identity: str | None = Field(
        None,
        alias="bagIdentity",
        description="Identifier of a consumer's bag of items, typically a barcode.",
    )


class Location(BaseModel):
    """
    Consumer session location data
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_id: str | None = Field(
        None,
        alias="customerId",
        description="Customer provided ID of recycling location",
        examples=["store-1337"],
    )
    name: str | None = Field(
        None,
        description="Name of recycling location, typically store name",
        examples=["SuperStore Asker"],
    )


class Rvm(BaseModel):
    """
    Consumer session RVM data
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    serial_number: str | None = Field(
        None,
        alias="serialNumber",
        description="The RVMs serial number",
        examples=["999888777"],
    )
    type: str | None = Field(
        None, description="The RVMs machine type", examples=["T90"]
    )


class RFC7807ProblemResponse(BaseModel):
    """
    RFC7807 formatted error response, see https://datatracker.ietf.org/doc/html/rfc7807
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: AnyUrl | None = Field(
        None, description="A URI reference that identifies the problem type."
    )
    title: str | None = Field(
        None, description="A short, human-readable summary of the problem type."
    )
    status: int | None = Field(
        None,
        description="The HTTP status code generated by the origin server for this occurrence of the problem.",
    )
    detail: str | None = Field(
        None,
        description="A human-readable explanation specific to this occurrence of the problem.",
    )
    error_id: str | None = Field(
        None, alias="errorId", description="Unique ID of this instance of the problem."
    )


class Item1(Single):
    """
    Group of items with the same properties recycled in a consumer session.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    count: int = Field(..., description="Number of items", examples=[20])
    type: Type = Field(
        ...,
        description="type of item, single, crate or crateItem. CrateItems are single items inside a crate",
    )
    refund: int = Field(
        ...,
        description="Refund value of one item, multiplied by 1000 to remove decimals.",
        examples=[1000],
    )
    super_group: int | None = Field(
        None, alias="superGroup", description="Super group of the item.", examples=[42]
    )
    category: str | None = Field(
        None, description="Category of the item.", examples=["C"]
    )
    manual: bool | None = Field(
        None, description="Item manually added.", examples=["false"]
    )


class Item2(Crate):
    """
    Group of items with the same properties recycled in a consumer session.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    count: int = Field(..., description="Number of items", examples=[20])
    type: Type = Field(
        ...,
        description="type of item, single, crate or crateItem. CrateItems are single items inside a crate",
    )
    refund: int = Field(
        ...,
        description="Refund value of one item, multiplied by 1000 to remove decimals.",
        examples=[1000],
    )
    super_group: int | None = Field(
        None, alias="superGroup", description="Super group of the item.", examples=[42]
    )
    category: str | None = Field(
        None, description="Category of the item.", examples=["C"]
    )
    manual: bool | None = Field(
        None, description="Item manually added.", examples=["false"]
    )


class RejectedItem(Single):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    count: int = Field(..., description="Number of items", examples=[1])
    type: Type2 = Field(
        ..., description="type of item, currently only single is supported"
    )
    manual: bool | None = Field(
        None, description="Item manually added.", examples=["false"]
    )


class Metadata(BaseModel):
    """
    Map of consumer session metadata
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    location: Location | None = None
    rvm: Rvm | None = None


class ConsumerSession(BaseModel):
    """
    Consumer recycling session
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: UUID | None = Field(
        None,
        description="Unique ID of recycling session",
        examples=["3c7f7557-c28e-4a89-98c2-b11da3bd9243"],
    )
    started_at: AwareDatetime | None = Field(
        None, alias="startedAt", description="Start time of recycling session (ISO8601)"
    )
    completed_at: AwareDatetime | None = Field(
        None, alias="completedAt", description="End time of recycling session (ISO8601)"
    )
    refund: int | None = Field(
        None,
        description="Total consumer session refund value, multiplied by 1000 to remove decimals. E.g. a value of 4200 corresponds to a decimal value of 4.2.",
        examples=[4200],
    )
    identity: Identity | None = None
    items: list[Item1 | Item2] | None = Field(
        None, description="List of items recycled in this consumer session."
    )
    rejected_items: list[RejectedItem] | None = Field(
        None,
        alias="rejectedItems",
        description="List of items rejected in this consumer session.",
    )
    bulk: Bulk | None = None
    donations: list[Donation] | None = Field(
        None,
        description="List of donations in this consumer session, only present if there are donations. The sum of donation amounts can be equal to or less than the refund. Usage of this field requires knowledge of the RVM configuration and should be agreed with TOMRA.",
    )
    voucher_barcode: str | None = Field(
        None,
        alias="voucherBarcode",
        description="Barcode of the voucher printed at consumer session completion.",
        examples=["9806730042841085620520100663"],
    )
    metadata: Metadata | None = None


class Datum(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    consumer_session: ConsumerSession | None = Field(None, alias="consumerSession")


class ConsumerSessionQueryResponse(BaseModel):
    """
    Result of consumer session query
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    data: list[Datum] | None = None
    next: str | None = Field(
        None,
        description="This field contains a continuation token which can be passed in the `next` query parameter for getting the next page of results. Omitted if no more pages.",
        examples=["rluKBFo1W56liVnhzdWJ4m/zIxA/YNS8awl8vpQGK80="],
    )
