# generated by datamodel-codegen:
#   filename:  TomraConsumerSessionApi.yaml
#   timestamp: 2024-01-19T09:11:54+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from uuid import UUID

from pydantic import AnyUrl, BaseModel, Field


class Donation(BaseModel):
    """
    A donation to a receiver. The receiver is configured on the RVM.
    """

    class Config:
        allow_population_by_field_name = True

    receiver: str | None = Field(
        None, description="The id of the donation receiver", example="redcross"
    )
    amount: int | None = Field(
        None,
        description=(
            "Amount donated, multiplied by 1000 to remove decimals. E.g. a value of"
            " 4200 corresponds to a decimal value of 4.2."
        ),
        example=1000,
    )


class Type(Enum):
    """
    type of item, single, crate or crateItem. CrateItems are single items inside a crate
    """

    single = "single"
    crate = "crate"
    crate_item = "crateItem"


class Single(BaseModel):
    """
    Properties for a single object.
    """

    class Config:
        allow_population_by_field_name = True

    barcode: str | None = Field(
        None,
        description="Deprecated property - use productCode instead.",
        example="5449000000996",
    )
    product_code: str | None = Field(
        None,
        alias="productCode",
        description="Product code scanned on the item. Absent if not available.",
        example="5449000000996",
    )
    product_individual_code: str | None = Field(
        None,
        alias="productIndividualCode",
        description=(
            "Individual serializable code scanned on the item. Absent if not available."
        ),
        example="Q8uJdozWx8oEH21G",
    )


class Crate(BaseModel):
    """
    Properties for a crate.
    """

    class Config:
        allow_population_by_field_name = True


class Identity(BaseModel):
    """
    Contains an identity linking the session to a consumer.
    """

    class Config:
        allow_population_by_field_name = True

    consumer_identity: str | None = Field(
        None,
        alias="consumerIdentity",
        description=(
            "Identity provided in consumer identification operation, e.g. from QR scan,"
            " loyalty card registration etc."
        ),
        example="user99",
    )
    bag_identity: str | None = Field(
        None,
        alias="bagIdentity",
        description="Identifier of a consumer's bag of items, typically a barcode.",
    )


class Location(BaseModel):
    """
    Consumer session location data
    """

    class Config:
        allow_population_by_field_name = True

    customer_id: str | None = Field(
        None,
        alias="customerId",
        description="Customer provided ID of recycling location",
        example="store-1337",
    )
    name: str | None = Field(
        None,
        description="Name of recycling location, typically store name",
        example="SuperStore Asker",
    )


class Rvm(BaseModel):
    """
    Consumer session RVM data
    """

    class Config:
        allow_population_by_field_name = True

    serial_number: str | None = Field(
        None,
        alias="serialNumber",
        description="The RVMs serial number",
        example="999888777",
    )
    type: str | None = Field(None, description="The RVMs machine type", example="T90")


class RFC7807ProblemResponse(BaseModel):
    """
    RFC7807 formatted error response, see https://datatracker.ietf.org/doc/html/rfc7807
    """

    class Config:
        allow_population_by_field_name = True

    type: AnyUrl | None = Field(
        None, description="A URI reference that identifies the problem type."
    )
    title: str | None = Field(
        None, description="A short, human-readable summary of the problem type."
    )
    status: int | None = Field(
        None,
        description=(
            "The HTTP status code generated by the origin server for this occurrence of"
            " the problem."
        ),
    )
    detail: str | None = Field(
        None,
        description=(
            "A human-readable explanation specific to this occurrence of the problem."
        ),
    )
    error_id: str | None = Field(
        None, alias="errorId", description="Unique ID of this instance of the problem."
    )


class Item1(Single):
    """
    Group of items with the same properties recycled in a consumer session.
    """

    class Config:
        allow_population_by_field_name = True

    count: int | None = Field(None, description="Number of items", example=20)
    type: Type | None = Field(
        None,
        description=(
            "type of item, single, crate or crateItem. CrateItems are single items"
            " inside a crate"
        ),
    )
    refund: int | None = Field(
        None,
        description="Refund value of one item, multiplied by 1000 to remove decimals.",
        example=1000,
    )
    super_group: str | None = Field(
        None,
        alias="superGroup",
        description="Super group of the items material type.",
        example="42",
    )


class Item2(Crate):
    """
    Group of items with the same properties recycled in a consumer session.
    """

    class Config:
        allow_population_by_field_name = True

    count: int | None = Field(None, description="Number of items", example=20)
    type: Type | None = Field(
        None,
        description=(
            "type of item, single, crate or crateItem. CrateItems are single items"
            " inside a crate"
        ),
    )
    refund: int | None = Field(
        None,
        description="Refund value of one item, multiplied by 1000 to remove decimals.",
        example=1000,
    )
    super_group: str | None = Field(
        None,
        alias="superGroup",
        description="Super group of the items material type.",
        example="42",
    )


class Metadata(BaseModel):
    """
    Map of consumer session metadata
    """

    class Config:
        allow_population_by_field_name = True

    location: Location | None = None
    rvm: Rvm | None = None


class ConsumerSession(BaseModel):
    """
    Consumer recycling session
    """

    class Config:
        allow_population_by_field_name = True

    id: UUID | None = Field(
        None,
        description="Unique ID of recycling session",
        example="3c7f7557-c28e-4a89-98c2-b11da3bd9243",
    )
    started_at: datetime | None = Field(
        None, alias="startedAt", description="Start time of recycling session (ISO8601)"
    )
    refund: int | None = Field(
        None,
        description=(
            "Total consumer session refund value, multiplied by 1000 to remove"
            " decimals. E.g. a value of 4200 corresponds to a decimal value of 4.2."
        ),
        example=4200,
    )
    identity: Identity | None = None
    items: list[Item1 | Item2] | None = Field(
        None, description="List of items recycled in this consumer session."
    )
    donations: list[Donation] | None = Field(
        None,
        description=(
            "List of donations in this consumer session, only present if there are"
            " donations. The sum of donation amounts can be equal to or less than the"
            " refund. Usage of this field requires knowledge of the RVM configuration"
            " and should be agreed with TOMRA."
        ),
    )
    voucher_barcode: str | None = Field(
        None,
        alias="voucherBarcode",
        description="Barcode of the voucher printed at consumer session completion.",
        example="9806730042841085620520100663",
    )
    metadata: Metadata | None = None


class Datum(BaseModel):
    class Config:
        allow_population_by_field_name = True

    consumer_session: ConsumerSession | None = Field(None, alias="consumerSession")


class ConsumerSessionQueryResponse(BaseModel):
    """
    Result of consumer session query
    """

    class Config:
        allow_population_by_field_name = True

    data: list[Datum] | None = None
    next: str | None = Field(
        None,
        description=(
            "This field contains a continuation token which can be passed in the `next`"
            " query parameter for getting the next page of results. Omitted if no more"
            " pages."
        ),
        example="rluKBFo1W56liVnhzdWJ4m/zIxA/YNS8awl8vpQGK80=",
    )
