# Generated by Django 4.2.2 on 2023-11-14 09:55

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import esani_pantportal.models
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CompanyUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(help_text='Brugerens telefonnummer inkl. landekode', max_length=128, region=None, verbose_name='Telefonnummer')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Butiksnavn', max_length=255, verbose_name='Butiksnavn')),
                ('address', models.CharField(help_text='Butikkens registrerede adresse', max_length=255, verbose_name='Adresse')),
                ('postal_code', models.CharField(help_text='Butikkens registrerede postnummer', max_length=10, verbose_name='Postnummer')),
                ('city', models.CharField(help_text='Butikkens registrerede bynavn', max_length=255, verbose_name='By')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(help_text='Butikkens telefonnummer inkl. landekode', max_length=128, region=None, verbose_name='Telefonnummer')),
                ('location_id', models.PositiveIntegerField(help_text='Butikkens lokation ID', verbose_name='LokationsID')),
                ('customer_id', models.PositiveIntegerField(blank=True, help_text='Butikkens kundenummer hos Tomra (valgfri)', null=True, verbose_name='Kundenummer')),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Firmanavn', max_length=255, verbose_name='Firmanavn')),
                ('cvr', models.PositiveIntegerField(help_text='CVR Nummer', unique=True, verbose_name='CVR Nummer')),
                ('address', models.CharField(help_text='Firmaets registrerede adresse', max_length=400, verbose_name='Adresse')),
                ('postal_code', models.CharField(help_text='Firmaets registrerede postnummer', max_length=10, verbose_name='Postnummer')),
                ('city', models.CharField(help_text='Firmaets registrerede bynavn', max_length=255, verbose_name='By')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(help_text='Firmaets telefonnummer inkl. landekode', max_length=128, region=None, verbose_name='Telefonnummer')),
                ('permit_number', models.PositiveIntegerField(blank=True, help_text='Firmaets tilladelsesnummer for import af ethanolholdige drikkevarer (valgfri)', null=True, verbose_name='Tilladelsesnummer')),
            ],
        ),
        migrations.CreateModel(
            name='PackagingRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_number', models.PositiveIntegerField(help_text='Afgiftsanmeldelsesnummer', unique=True, verbose_name='Afgiftsanmeldelsesnummer')),
                ('date', models.DateField(auto_now_add=True, db_index=True, verbose_name='Dato')),
                ('recipient_company', models.ForeignKey(help_text='Firma, som skal modtage varerne og betale pant', on_delete=django.db.models.deletion.PROTECT, related_name='received_packaging', to='esani_pantportal.company', verbose_name='Varemodtager')),
                ('registration_company', models.ForeignKey(help_text='Firma ansvarligt for afgiftsanmeldelsen', on_delete=django.db.models.deletion.PROTECT, related_name='registered_packaging', to='esani_pantportal.company', verbose_name='Anmelder')),
            ],
            options={
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.CharField(help_text='Navn på det pågældende produkt', max_length=200, verbose_name='Produktnavn')),
                ('barcode', models.CharField(help_text='Stregkode for et indmeldt produkt', unique=True, validators=[esani_pantportal.models.validate_barcode_length, esani_pantportal.models.validate_digit], verbose_name='Stregkode')),
                ('refund_value', models.PositiveIntegerField(default=200, help_text='Pantværdi, angivet i øre (100=1DKK, 25=0.25DKK)', verbose_name='Pantværdi')),
                ('approved', models.BooleanField(default=False, help_text='Produkt godkendt til pantsystemet af en ESANI medarbejder', verbose_name='Godkendt')),
                ('material', models.CharField(choices=[('P', 'PET'), ('A', 'Aluminium'), ('S', 'Stål'), ('G', 'Glas')], help_text='Kategori for emballagens materiale.', verbose_name='Materiale')),
                ('height', models.PositiveIntegerField(help_text='Emballagens højde i millimeter', verbose_name='Højde')),
                ('diameter', models.PositiveIntegerField(help_text='Emballagens diameter i millimeter', verbose_name='Diameter')),
                ('weight', models.PositiveIntegerField(help_text='Tør/tom vægt af emballagen i gram', verbose_name='Vægt')),
                ('capacity', models.PositiveIntegerField(help_text='Emballagens volumen i milliliter', verbose_name='Volumen')),
                ('shape', models.CharField(choices=[('F', 'Flaske'), ('A', 'Anden')], help_text='Kategori for emballagens form.', verbose_name='Form')),
                ('tax_group', models.PositiveIntegerField(choices=[(12, 'ETHANOLHOLDIGE DRIKKEVARER (Øl, vin, spiritus, cider) med et ethanol indhold)- 3,10 - 4,09 volumenprocent.'), (13, 'ETHANOLHOLDIGE DRIKKEVARER (Øl, vin, spiritus, cider) med et ethanol indhold)- 4,10 - 5,09 volumenprocent.'), (14, 'ETHANOLHOLDIGE DRIKKEVARER (Øl, vin, spiritus, cider) med et ethanol indhold)- 5,10 - 7,09 volumenprocent.'), (15, 'ETHANOLHOLDIGE DRIKKEVARER (Øl, vin, spiritus, cider) med et ethanol indhold)- 7,10 - 9,09 volumenprocent.'), (16, 'ETHANOLHOLDIGE DRIKKEVARER (Øl, vin, spiritus, cider) med et ethanol indhold)- 9,10 - 11,09 volumenprocent.'), (17, 'ETHANOLHOLDIGE DRIKKEVARER (Øl, vin, spiritus, cider) med et ethanol indhold)- 11,10 - 13,09 volumenprocent.'), (18, 'ETHANOLHOLDIGE DRIKKEVARER (Øl, vin, spiritus, cider) med et ethanol indhold)- 13,10 - 15,09 volumenprocent.'), (19, 'ETHANOLHOLDIGE DRIKKEVARER (Øl, vin, spiritus, cider) med et ethanol indhold)- 15,10 - 18,09 volumenprocent.'), (20, 'ETHANOLHOLDIGE DRIKKEVARER (Øl, vin, spiritus, cider) med et ethanol indhold)- 18,10 - 22,09 volumenprocent.'), (21, 'ETHANOLHOLDIGE DRIKKEVARER (Øl, vin, spiritus, cider) med et ethanol indhold)- 22,10 - 26,09 volumenprocent.'), (22, 'ETHANOLHOLDIGE DRIKKEVARER (Øl, vin, spiritus, cider) med et ethanol indhold)- 26,10 - 30,09 volumenprocent.'), (23, 'ETHANOLHOLDIGE DRIKKEVARER (Øl, vin, spiritus, cider) med et ethanol indhold)- 30,10 - 35,09 volumenprocent.'), (24, 'ETHANOLHOLDIGE DRIKKEVARER (Øl, vin, spiritus, cider) med et ethanol indhold)- 35,10 - 45,09 volumenprocent.'), (25, 'ETHANOLHOLDIGE DRIKKEVARER (Øl, vin, spiritus, cider) med et ethanol indhold)- 45,10 - 60,09 volumenprocent.'), (26, 'ETHANOLHOLDIGE DRIKKEVARER (Øl, vin, spiritus, cider) med et ethanol indhold)- 60,10 - 100,00 volumenprocent.'), (31, 'MINERALVAND, sodavand og andre kulsyre\xadholdige læskedrikke.'), (32, 'MINERALVAND, sodavand og andre kulsyre\xadholdige læskedrikke. Indført til Qaanaaq, Ittoqqortoormiit og Tasiilaq af erhvervsdrivende.'), (33, 'LÆSKEDRIKKONCENTRAT til brug for frem\xadstilling af kulsyreholdige drikke'), (34, 'EMBALLAGE til drikkevarer, koncentrater og frugtsafter, excl. emballage til mælkeprodukter samt grønlandske returflasker: Med nettoindhold til og med 0,25 liter'), (35, 'EMBALLAGE til drikkevarer, koncentrater og frugtsafter, excl. emballage til mælkeprodukter samt grønlandske returflasker: Med nettoindhold på over 0,25 liter')], help_text='Afgiftsgruppe til toldbehandlings-system', verbose_name='Afgiftsgruppe')),
                ('danish', models.CharField(choices=[('J', 'Ja'), ('N', 'Nej'), ('U', 'Ukendt')], default='U', help_text='Der er Dansk pant på dette produkt', verbose_name='Dansk pant')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to=settings.AUTH_USER_MODEL, verbose_name='Oprettet af')),
            ],
            options={
                'ordering': ['product_name', 'barcode'],
                'permissions': [('approve_product', 'User is allowed to approve products awaiting registration')],
            },
        ),
        migrations.CreateModel(
            name='QRCodeGenerator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveIntegerField(default=0, help_text='Antal QR-koder genereret indtil nu', verbose_name='Antal QR-koder')),
                ('name', models.CharField(help_text='Navn på denne serie af QR-koder', max_length=200, unique=True, verbose_name='Navn')),
                ('prefix', models.PositiveIntegerField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='RefundMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compensation', models.PositiveIntegerField(default=0, help_text='Håndterings-godtgørelse, angivet i øre (100=1DKK, 25=0.25DKK)', verbose_name='Håndterings-godtgørelse')),
                ('serial_number', models.CharField(blank=True, help_text='Maskinens serienummer', null=True, verbose_name='Serienummer')),
                ('method', models.CharField(choices=[('K', 'Flaskeautomat m/komprimator'), ('S', 'Flaskeautomat m/sikkerhedscontainer'), ('SK', 'Flaskeautomat m/komprimator m/sikkerhedscontainer'), ('S', 'Sække'), ('M', 'Manuel sortering'), ('A', 'Anden')], help_text='Måden at pant bliver registreret på', verbose_name='Pantmetode')),
                ('branch', models.ForeignKey(help_text='Butik hvor denne maskine står', on_delete=django.db.models.deletion.PROTECT, related_name='butik', to='esani_pantportal.branch', verbose_name='Butik')),
            ],
        ),
        migrations.CreateModel(
            name='QRCodeInterval',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.PositiveIntegerField()),
                ('increment', models.PositiveIntegerField()),
                ('salt', models.CharField(max_length=200)),
                ('generator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='intervals', to='esani_pantportal.qrcodegenerator')),
            ],
            options={
                'ordering': ['start'],
            },
        ),
        migrations.CreateModel(
            name='ProductLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(help_text='Styks pant-pligtig emballage importeret', verbose_name='Antal')),
                ('packaging_registration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='esani_pantportal.packagingregistration')),
                ('product', models.ForeignKey(help_text='Indmeldte produkt', on_delete=django.db.models.deletion.PROTECT, related_name='product_line', to='esani_pantportal.product', verbose_name='Produkt')),
            ],
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['name', 'cvr'], name='esani_pantp_name_aee5e3_idx'),
        ),
        migrations.AddField(
            model_name='branch',
            name='company',
            field=models.ForeignKey(help_text='Virksomhed som denne butik tilhører', on_delete=django.db.models.deletion.PROTECT, related_name='company', to='esani_pantportal.company', verbose_name='Virksomhed'),
        ),
        migrations.AddField(
            model_name='companyuser',
            name='branch',
            field=models.ForeignKey(blank=True, help_text='Butik hvor denne bruger arbejder', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='arbejdssted', to='esani_pantportal.branch', verbose_name='Butik'),
        ),
        migrations.AddField(
            model_name='companyuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='companyuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
